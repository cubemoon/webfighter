{
  "name": "mozpay",
  "version": "0.0.3",
  "description": "fulfill web payments with navigator.mozPay()",
  "keywords": [
    "open",
    "web",
    "apps",
    "payments",
    "firefox",
    "os"
  ],
  "homepage": "https://github.com/mozilla/mozpay-js",
  "files": [
    "lib"
  ],
  "main": "lib/mozpay",
  "engines": {
    "node": ">= 0.6.17",
    "npm": ">= 1.2.x"
  },
  "dependencies": {
    "jwt-simple": "0.1.0"
  },
  "devDependencies": {
    "express": "2.5.8",
    "gently": "0.9.2",
    "mocha": "1.8.1",
    "should": "1.2.1",
    "superagent": "0.12.4",
    "underscore": "1.4.4"
  },
  "scripts": {
    "test": "_mocha"
  },
  "readme": "<h1>mozpay</h1>\n\n<p>This is a NodeJS module for processing\n<a href=\"https://wiki.mozilla.org/WebAPI/WebPayment\">navigator.mozPay()</a> payments on a\nserver.</p>\n\n<p>You'll need to obtain a secret key from a provider such as the\n<a href=\"https://marketplace.firefox.com/\">Firefox Marketplace</a>\nbut this module should work with any compliant\n<a href=\"https://wiki.mozilla.org/WebAPI/WebPaymentProvider\">provider</a>.\nHere is a guide to\n<a href=\"https://developer.mozilla.org/en-US/docs/Apps/Publishing/In-app_payments\">setting up payments</a>\nwith Firefox Marketplace.</p>\n\n<p>The basic payment flow goes like this:</p>\n\n<ul>\n<li>A user clicks a buy button on your app</li>\n<li>Your app signs a <a href=\"http://openid.net/specs/draft-jones-json-web-token-07.html\">JSON Web Token (JWT)</a>\ndescribing the product, the price, and postback/chargeback URLs.</li>\n<li>Your app client fetches the JWT from the server and calls <code>navigator.mozPay()</code></li>\n<li>Your server receives a JWT at its postback or chargeback URL</li>\n<li>If the postback was received and the JWT signature validates against your secret\nkey then you can disburse your product.</li>\n</ul>\n\n<h2>Install</h2>\n\n<pre><code>npm install mozpay\n</code></pre>\n\n<h2>Configuration</h2>\n\n<p>The module is intended to be used server side only because you can't expose\nyour secret key to the client. There are helpers to hook into an\n<a href=\"http://expressjs.com/\">express</a> app but you could probably use other web frameworks too.</p>\n\n<p>Load the module:</p>\n\n<pre><code>var pay = require('mozpay');\n</code></pre>\n\n<p>Configure it when your app starts up:</p>\n\n<pre><code>pay.configure({\n  // This is your Application Key from the Firefox Marketplace Devhub.\n  mozPayKey: '52ee5d47-9981-40ad-bf6e-bca957f65385',\n  // This is your Application Secret from the Firefox Marketplace Devhub.\n  mozPaySecret: 'd6338705419ea14328084e0c182603ebec4e52c1c6cbceda4d61ee125f10c0f728c4451a4637e4e960b3293df8bb6ac5',\n  // This is the aud (audience) in the JWT. You only need to override this if you want to use a dev server.\n  mozPayAudience: 'marketplace.firefox.com',\n  // This is an optional prefix to your postback/chargeback URLs.\n  // For example, a postback would be available at https://yourapp/mozpay/postback with the default prefix.\n  mozPayRoutePrefix: '/mozpay',\n  // Set a custom payment type for JWTs. You only need to override this if\n  // you're working with a non-default payment provider.\n  mozPayType: 'mozilla/payments/pay/v1'\n});\n</code></pre>\n\n<p>With an <a href=\"http://expressjs.com/api.html#express\">express app object</a>, add your routes:</p>\n\n<pre><code>var express = require('express');\nvar pay = require('mozpay');\nvar app = express();\n\napp.configure(function(){\n  // Make sure you turn on the body parser for POST params.\n  app.use(express.bodyParser());\n});\n\npay.routes(app);\n</code></pre>\n\n<p>You can test your postback/chargeback URLs with something like this:</p>\n\n<pre><code>curl -X POST -d notice=JWT http://localhost:3000/mozpay/postback\ncurl -X POST -d notice=JWT http://localhost:3000/mozpay/chargeback\n</code></pre>\n\n<p>If you see a 400 Bad Request response then your app is configured to receive\nreal JWT requests.</p>\n\n<p>You can combine the configuration and routes setup like this:</p>\n\n<pre><code>pay.routes(app, {\n  mozPayKey: '52ee5d47-9981-40ad-bf6e-bca957f65385',\n  mozPaySecret: 'd6338705419ea14328084e0c182603ebec4e52c1c6cbceda4d61ee125f10c0f728c4451a4637e4e960b3293df8bb6ac5',\n  // ...\n});\n</code></pre>\n\n<h2>Events</h2>\n\n<p>Here's how to take action when the postback notices are\nreceived. The <code>data</code> argument to these event handlers are only for valid JWT\nnotices that pass the signature verification.</p>\n\n<pre><code>pay.on('postback', function(data) {\n  console.log('product ID ' + data.request.id + ' has been purchased');\n  console.log('Transaction ID: ' + data.response.transactionID);\n});\n\npay.on('chargeback', function(data) {\n  console.log('product ID ' + data.request.id + ' failed');\n  console.log('reason: ' + data.response.reason);\n  console.log('Transaction ID: ' + data.response.transactionID);\n});\n</code></pre>\n\n<p>The <code>data.request</code> object is a copy of what you initiated the payment request\nwith.</p>\n\n<h2>Issuing Payment Requests</h2>\n\n<p>When a user clicks the buy button you should fetch a JWT from the server via\nAjax. You can't cache JWTs for too long because they have a short expiration\n(generally about an hour).</p>\n\n<p>There is a helper to created a JWT to begin a payment.\nOn your server create a URL that does something like this:</p>\n\n<pre><code>var jwt = pay.request({\n  id: 'your-unique-product-id',\n  name: 'Your Product',\n  description: 'A little bit more about the product...',\n  pricePoint: 1,  // Consult the Firefox Marketplace price points for details.\n                  // This expands to a price/currency at the time of payment.\n  productData: 'session_id=xyz',  // You can track whatever you like here.\n  // These must be absolute URLs like what you configured above.\n  postbackURL: 'http://localhost:3000/mozpay/postback',\n  chargebackURL: 'http://localhost:3000/mozpay/chargeback'\n});\n</code></pre>\n\n<p>In your client-side JavaScript, you can initiate a payment with the JWT like\nthis:</p>\n\n<pre><code>var request = navigator.mozPay([jwtFromServer]);\nrequest.onsuccess = function() {\n  console.log('navigator.mozPay() finished');\n  // The product has not yet been bought!\n  // Poll your server until a valid postback has been received.\n  waitForPostback();\n}\nrequest.onerror = function() {\n  console.log('navigator.mozPay() error: ' + this.error.name);\n};\n</code></pre>\n\n<h2>Developers</h2>\n\n<p>Grab the <a href=\"https://github.com/mozilla/mozpay-js\">source</a>:</p>\n\n<pre><code>git clone git://github.com/mozilla/mozpay-js.git\n</code></pre>\n\n<p>Install the dependencies:</p>\n\n<pre><code>cd mozpay-js\nnpm install\n</code></pre>\n\n<p>Here's how to run the tests:</p>\n\n<pre><code>npm test\n</code></pre>\n",
  "readmeFilename": "README.html",
  "_id": "mozpay@0.0.3",
  "_from": "mozpay@"
}
